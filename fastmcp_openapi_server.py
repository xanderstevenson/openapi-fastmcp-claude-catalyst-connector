import os
import json
import asyncio
from typing import Optional, Dict, Any

import httpx
from fastmcp import FastMCP
from dotenv import load_dotenv


# -----------------------------
# FastMCP server based on OpenAPI
# -----------------------------
# This runs independently of `mcp_server_simple.py`.
# It uses FastMCP.from_openapi to auto-generate tools from the local
# `catalyst_center_openapi.json` and adds a thin custom tool wrapper
# for convenience (`get_network_devices_openapi`).
#
# Env vars used (kept consistent with existing project):
# - CATALYST_BASE_URL (preferred) or CATALYST_CENTER_URL (fallback)
# - CATALYST_USERNAME / CATALYST_CENTER_USERNAME
# - CATALYST_PASSWORD / CATALYST_CENTER_PASSWORD
# - CATALYST_TOKEN (optional, pre-provisioned X-Auth-Token)
# - CATALYST_VERIFY_TLS (default: true)
# - CATALYST_TIMEOUT (seconds, default: 30)
#
# Usage:
#   $ python fastmcp_openapi_server.py
# Then add this script as a separate MCP server in Claude Desktop.


def _get_env(name: str, fallback: Optional[str] = None) -> Optional[str]:
    v = os.getenv(name)
    return v if v not in (None, "") else fallback


def _bool_env(name: str, default: bool) -> bool:
    raw = os.getenv(name)
    if raw is None:
        return default
    return raw.lower() in ("1", "true", "yes", "y", "on")


async def build_mcp() -> FastMCP:
    # Load env from project directory
    project_dir = os.path.dirname(__file__)
    dotenv_path = os.path.join(project_dir, ".env")
    load_dotenv(dotenv_path=dotenv_path)

    base_url = _get_env("CATALYST_BASE_URL") or _get_env("CATALYST_CENTER_URL")
    if not base_url:
        raise RuntimeError("CATALYST_BASE_URL or CATALYST_CENTER_URL must be set")

    # Prepare HTTP client with base URL
    headers: Dict[str, str] = {}
    verify_tls = _bool_env("CATALYST_VERIFY_TLS", True)
    timeout_s = float(_get_env("CATALYST_TIMEOUT", "30"))

    # Create a shared AsyncClient used by all autogenerated tools
    client = httpx.AsyncClient(
        base_url=base_url.rstrip("/") + "/", 
        verify=verify_tls, 
        timeout=timeout_s, 
        headers=headers
    )

    # Load OpenAPI spec from local file
    local_spec_path = os.path.join(project_dir, "catalyst_center_openapi.json")
    try:
        with open(local_spec_path, "r", encoding="utf-8") as f:
            openapi_spec = json.load(f)
        print("Successfully loaded local OpenAPI spec")
        print(f"OpenAPI version: {openapi_spec.get('openapi', 'unknown')}")
        if 'paths' in openapi_spec:
            print(f"Number of API paths: {len(openapi_spec['paths'])}")
    except Exception as e:
        raise RuntimeError(f"Could not load local OpenAPI spec: {str(e)}")

    # Build MCP from OpenAPI spec
    mcp = FastMCP.from_openapi(
        openapi_spec=openapi_spec,
        client=client,
        name="Catalyst Center (FastMCP/OpenAPI)"
    )

    return mcp


async def main():
    mcp = await build_mcp()
    print("FastMCP server starting...")
    await mcp.run_async()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nServer stopped by user")
    except Exception as e:
        print(f"Error: {e}")
        raise
